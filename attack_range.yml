---
- name: Setup Splunk Attack Range
  hosts: attack_range
  become: yes
  vars:
    terraform_version: "1.9.8"
    terraform_zip: "/home/ubuntu/terraform.zip"
    awscli_zip: "/home/ubuntu/awscliv2.zip"
    poetry_bin: "/home/ubuntu/.local/bin/poetry"

  pre_tasks:
    - name: Ensure SSH key permissions are correct
      ansible.builtin.file:
        path: "{{ playbook_dir }}/keys/Admin123.pem"
        mode: '0400'
      delegate_to: localhost
      run_once: true

    - name: Wait for SSH to become available
      ansible.builtin.wait_for_connection:
        timeout: 180

    - name: Test SSH connectivity
      ansible.builtin.ping:

  tasks:
    - name: Update system packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist

    - name: Install base tools
      ansible.builtin.apt:
        name:
          - python3.10
          - git
          - unzip
          - python3-pip
          - curl
          - zip
        state: present

    - name: Install Python build dependencies
      ansible.builtin.apt:
        name:
          - build-essential
          - libffi-dev
          - python3-dev
          - python3-setuptools
          - python3-wheel
        state: present
        update_cache: yes

    - name: Upgrade pip, setuptools, and wheel
      ansible.builtin.pip:
        name:
          - pip
          - setuptools
          - wheel
        state: latest
        executable: pip3

    - name: Download Terraform
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "{{ terraform_zip }}"
        mode: '0644'

    - name: Unzip Terraform
      ansible.builtin.unarchive:
        src: "{{ terraform_zip }}"
        dest: "/usr/local/bin/"
        remote_src: yes
      args:
        creates: "/usr/local/bin/terraform"

    - name: Clone attack range repo
      ansible.builtin.git:
        repo: https://github.com/splunk/attack_range.git
        dest: /home/ubuntu/attack_range
        version: master
        force: yes
      become_user: ubuntu

    - name: Download AWS CLI v2
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: "{{ awscli_zip }}"
        mode: '0644'

    - name: Unzip AWS CLI
      ansible.builtin.unarchive:
        src: "{{ awscli_zip }}"
        dest: /home/ubuntu/
        remote_src: yes

    - name: Install AWS CLI
      ansible.builtin.command:
        cmd: ./aws/install --update
        chdir: /home/ubuntu
        creates: /usr/local/bin/aws

    - name: Ask for AWS Access Key ID
      ansible.builtin.pause:
        prompt: "Enter your AWS Access Key ID"
      register: aws_access_key

    - name: Ask for AWS Secret Access Key
      ansible.builtin.pause:
        prompt: "Enter your AWS Secret Access Key"
        echo: no
      register: aws_secret_key

    - name: Ask for AWS Region
      ansible.builtin.pause:
        prompt: "Enter your default AWS region (e.g., us-east-1)"
      register: aws_region

    - name: Configure AWS CLI
      ansible.builtin.shell: |
        aws configure set aws_access_key_id "{{ aws_access_key.user_input }}"
        aws configure set aws_secret_access_key "{{ aws_secret_key.user_input }}"
        aws configure set default.region "{{ aws_region.user_input }}"
      args:
        executable: /bin/bash

    - name: Install Poetry
      ansible.builtin.shell: |
        curl -sSL https://install.python-poetry.org | python3 -
      args:
        executable: /bin/bash
        creates: "{{ poetry_bin }}"
      become_user: ubuntu

    - name: Add Poetry to PATH
      ansible.builtin.lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'export PATH="/home/ubuntu/.local/bin:$PATH"'
        create: yes
      become_user: ubuntu

    - name: Install Poetry plugin
      ansible.builtin.shell: |
        export PATH="/home/ubuntu/.local/bin:$PATH"
        {{ poetry_bin }} self add poetry-plugin-shell
      args:
        executable: /bin/bash
      become_user: ubuntu

    - name: Patch cffi version in requirements.txt
      ansible.builtin.replace:
        path: /home/ubuntu/attack_range/requirements.txt
        regexp: 'cffi==1.13.2'
        replace: 'cffi==1.15.1'

    - name: Install Python dependencies
      ansible.builtin.pip:
        requirements: /home/ubuntu/attack_range/requirements.txt
        executable: pip3

    - name: Upgrade tabulate
      ansible.builtin.pip:
        name: "tabulate>=0.8.10"
        executable: pip3

    - name: Copy default attack_range.conf if not present
      ansible.builtin.copy:
        src: /home/ubuntu/attack_range/attack_range.conf.template
        dest: /home/ubuntu/attack_range/attack_range.conf
        remote_src: yes
        force: no
      become_user: ubuntu


# ==============================
# Second play: Configure Attack Range
# ==============================
- hosts: all
  gather_facts: false
  vars_prompt:
    - name: attack_range_provider
      prompt: "Enter the provider (aws/azure/local)"
      private: no
    - name: attack_range_region
      prompt: "Enter the region (e.g., ap-southeast-2)"
      private: no
    - name: attack_range_password
      prompt: "Enter the attack_range password"
      private: yes
    - name: attack_range_os
      prompt: "Choose OS (windows/linux)"
      private: no
      default: "linux"
    - name: attack_range_instance_type
      prompt: "Enter instance type (e.g., t2.medium)"
      private: no
    - name: attack_range_splunk
      prompt: "Install Splunk? (true/false)"
      private: no
    - name: attack_range_snort
      prompt: "Enable Snort? (true/false)"
      private: no
    - name: attack_range_zeek
      prompt: "Enable Zeek? (true/false)"
      private: no
    - name: attack_range_nginx
      prompt: "Enable Nginx? (true/false)"
      private: no

  tasks:
    - name: Set provider
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^provider'
        line: "provider = {{ attack_range_provider }}"

    - name: Set region
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^region'
        line: "region = {{ attack_range_region }}"

    - name: Set password
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^attack_range_password'
        line: "attack_range_password = {{ attack_range_password }}"

    - name: Set OS
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^os'
        line: "os = {{ attack_range_os }}"

    - name: Set instance type
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^instance_type'
        line: "instance_type = {{ attack_range_instance_type }}"

    - name: Enable Splunk
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^splunk'
        line: "splunk = {{ attack_range_splunk }}"

    - name: Enable Snort
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^snort'
        line: "snort = {{ attack_range_snort }}"

    - name: Enable Zeek
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^zeek'
        line: "zeek = {{ attack_range_zeek }}"

    - name: Enable Nginx
      lineinfile:
        path: /home/ubuntu/attack_range/attack_range.conf
        regexp: '^nginx'
        line: "nginx = {{ attack_range_nginx }}"

    - name: Build attack_range
      ansible.builtin.shell: |
        cd /home/ubuntu/attack_range
        python3 attack_range.py build
      args:
        executable: /bin/bash
      become_user: ubuntu
