---
- name: Setup Splunk Attack Range
  hosts: attack_range
  become: yes
  gather_facts: false
  vars:
    terraform_version: "1.9.8"
    terraform_zip: "/home/ubuntu/terraform.zip"
    awscli_zip: "/home/ubuntu/awscliv2.zip"
    poetry_bin: "/home/ubuntu/.local/bin/poetry"

    # Attack range inputs
    attack_range_provider: "{{ lookup('env','ATTACK_RANGE_PROVIDER') | default('aws') }}"
    attack_range_region: "{{ lookup('env','ATTACK_RANGE_REGION') | default('ap-southeast-2') }}"
    attack_range_password: "{{ lookup('env','ATTACK_RANGE_PASSWORD') | default('changeme') }}"
    attack_range_os: "{{ lookup('env','ATTACK_RANGE_OS') | default('linux') }}"
    attack_range_instance_type: "{{ lookup('env','ATTACK_RANGE_INSTANCE_TYPE') | default('t2.medium') }}"
    attack_range_splunk: "{{ lookup('env','ATTACK_RANGE_SPLUNK') | default('yes') }}"
    attack_range_snort:  "{{ lookup('env','ATTACK_RANGE_SNORT')  | default('no')  }}"
    attack_range_zeek:   "{{ lookup('env','ATTACK_RANGE_ZEEK')   | default('no')  }}"
    attack_range_nginx:  "{{ lookup('env','ATTACK_RANGE_NGINX')  | default('no')  }}"
    attack_range_key_name: "{{ lookup('env','ATTACK_RANGE_KEY_NAME') | default('attack-range-key-pair') }}"
    attack_range_private_key: "{{ lookup('env','ATTACK_RANGE_PRIVATE_KEY') | default('/home/ubuntu/.ssh/Admin123.pem') }}"
    attack_range_name: "{{ lookup('env','ATTACK_RANGE_NAME') | default('default') }}"

  pre_tasks:
    - name: Wait for SSH to become available
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Test SSH connectivity
      ansible.builtin.ping:

  tasks:
    - name: Update apt cache and upgrade
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Install base packages
      ansible.builtin.apt:
        name:
          - python3.10
          - python3.10-venv
          - git
          - unzip
          - python3-pip
          - curl
          - zip
        state: present
        update_cache: yes

    - name: Install Python build dependencies
      ansible.builtin.apt:
        name:
          - build-essential
          - libffi-dev
          - python3-dev
          - python3-setuptools
          - python3-wheel
        state: present

    # -----------------------------
    # FIX: Make pip tooling sane
    # -----------------------------
    - name: Upgrade pip, setuptools, wheel
      ansible.builtin.pip:
        name:
          - pip
          - setuptools
          - wheel
        state: latest
        executable: pip3

    - name: Pre-install safe MarkupSafe version (fix for Python 3.10)
      ansible.builtin.pip:
        name: "MarkupSafe==2.0.1"
        executable: pip3
        state: present

    - name: Download Terraform binary zip
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "{{ terraform_zip }}"
        mode: '0644'

    - name: Unarchive Terraform to /usr/local/bin
      ansible.builtin.unarchive:
        src: "{{ terraform_zip }}"
        dest: "/usr/local/bin/"
        remote_src: yes
      args:
        creates: "/usr/local/bin/terraform"

    - name: Clone attack_range repo
      ansible.builtin.git:
        repo: https://github.com/splunk/attack_range.git
        dest: /home/ubuntu/attack_range
        version: master
        force: yes
      become_user: ubuntu

    - name: Download AWS CLI v2
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: "{{ awscli_zip }}"
        mode: '0644'

    - name: Unzip AWS CLI
      ansible.builtin.unarchive:
        src: "{{ awscli_zip }}"
        dest: /home/ubuntu/
        remote_src: yes

    - name: Install AWS CLI
      ansible.builtin.command:
        cmd: ./aws/install --update
        chdir: /home/ubuntu
        creates: /usr/local/bin/aws

    # -----------------------------
    # Install Python deps properly
    # -----------------------------
    - name: Install python-terraform and python-hcl2
      ansible.builtin.pip:
        name:
          - python-terraform
          - python-hcl2
        executable: pip3
        state: present

    - name: Install requirements.txt (ignore failures, continue)
      ansible.builtin.pip:
        requirements: /home/ubuntu/attack_range/requirements.txt
        executable: pip3
      register: pip_requirements
      ignore_errors: yes

    # -----------------------------
    # Config attack_range.conf
    # -----------------------------
    - name: Copy attack_range.conf.template if missing
      ansible.builtin.copy:
        src: /home/ubuntu/attack_range/attack_range.conf.template
        dest: /home/ubuntu/attack_range/attack_range.conf
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      become_user: ubuntu
      args:
        creates: /home/ubuntu/attack_range/attack_range.conf

    - name: Set cloud_provider
      ansible.builtin.ini_file:
        path: /home/ubuntu/attack_range/attack_range.conf
        section: global
        option: cloud_provider
        value: "{{ attack_range_provider }}"
      become_user: ubuntu

    - name: Set AWS region
      ansible.builtin.ini_file:
        path: /home/ubuntu/attack_range/attack_range.conf
        section: aws
        option: region
        value: "{{ attack_range_region }}"
      become_user: ubuntu

    - name: Verify terraform binary
      ansible.builtin.command:
        cmd: /usr/local/bin/terraform -version

    - name: Init terraform backend
      ansible.builtin.command:
        cmd: /usr/local/bin/terraform init -input=false
        chdir: /home/ubuntu/attack_range/terraform/aws
      when: ansible_facts is defined

    - name: Run attack_range build
      ansible.builtin.command:
        argv:
          - python3
          - attack_range.py
          - -c
          - attack_range.conf
          - build
        chdir: /home/ubuntu/attack_range
      become_user: ubuntu
      register: attack_range_build
      failed_when: attack_range_build.rc != 0

    - name: Debug build output if failed
      ansible.builtin.debug:
        msg: |
          rc={{ attack_range_build.rc }}
          stdout={{ attack_range_build.stdout | default('') }}
          stderr={{ attack_range_build.stderr | default('') }}
      when: attack_range_build.rc != 0
