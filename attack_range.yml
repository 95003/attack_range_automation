---
- name: Setup Splunk Attack Range
  hosts: attack_range
  become: yes
  vars:
    terraform_version: "1.9.8"
    terraform_zip: "/home/ubuntu/terraform.zip"
    awscli_zip: "/home/ubuntu/awscliv2.zip"
    poetry_bin: "/home/ubuntu/.local/bin/poetry"

    # Attack range inputs: read from env first, then allow override via extra-vars
    attack_range_provider: "{{ lookup('env','ATTACK_RANGE_PROVIDER') | default(attack_range_provider_default | default('aws')) }}"
    attack_range_region: "{{ lookup('env','ATTACK_RANGE_REGION') | default(attack_range_region_default | default('ap-southeast-2')) }}"
    attack_range_password: "{{ lookup('env','ATTACK_RANGE_PASSWORD') | default(attack_range_password_default | default('changeme')) }}"
    attack_range_os: "{{ lookup('env','ATTACK_RANGE_OS') | default(attack_range_os_default | default('linux')) }}"
    attack_range_instance_type: "{{ lookup('env','ATTACK_RANGE_INSTANCE_TYPE') | default(attack_range_instance_type_default | default('t2.medium')) }}"

    # Feature flags using yes/no (strings). Use env vars like ATTACK_RANGE_SPLUNK=yes
    attack_range_splunk: "{{ lookup('env','ATTACK_RANGE_SPLUNK') | default(attack_range_splunk_default | default('yes')) }}"
    attack_range_snort:  "{{ lookup('env','ATTACK_RANGE_SNORT')  | default(attack_range_snort_default  | default('no'))  }}"
    attack_range_zeek:   "{{ lookup('env','ATTACK_RANGE_ZEEK')   | default(attack_range_zeek_default   | default('no'))  }}"
    attack_range_nginx:  "{{ lookup('env','ATTACK_RANGE_NGINX')  | default(attack_range_nginx_default  | default('no'))  }}"

    # Other range settings
    attack_range_key_name: "{{ lookup('env','ATTACK_RANGE_KEY_NAME') | default(attack_range_key_name_default | default('attack-range-key-pair')) }}"
    attack_range_private_key: "{{ lookup('env','ATTACK_RANGE_PRIVATE_KEY') | default(attack_range_private_key_default | default('/home/ubuntu/.ssh/Admin123.pem')) }}"
    attack_range_name: "{{ lookup('env','ATTACK_RANGE_NAME') | default(attack_range_name_default | default('default')) }}"

  pre_tasks:
    - name: Ensure SSH key permissions are correct on controller (if provided in repo)
      ansible.builtin.file:
        path: "{{ playbook_dir }}/keys/Admin123.pem"
        mode: '0400'
      delegate_to: localhost
      run_once: true

    - name: Wait for SSH to become available
      ansible.builtin.wait_for_connection:
        timeout: 300

    - name: Test SSH connectivity
      ansible.builtin.ping:

  tasks:
    - name: Update system packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist

    - name: Install base tools
      ansible.builtin.apt:
        name:
          - python3.10
          - git
          - unzip
          - python3-pip
          - curl
          - zip
        state: present

    - name: Install Python build dependencies
      ansible.builtin.apt:
        name:
          - build-essential
          - libffi-dev
          - python3-dev
          - python3-setuptools
          - python3-wheel
        state: present
        update_cache: yes

    - name: Ensure setuptools pinned to <81 to avoid pkg_resources deprecation warning
      ansible.builtin.pip:
        name:
          - "setuptools<81"
          - pip
          - wheel
        executable: pip3

    - name: Upgrade pip, setuptools, and wheel (extra safety)
      ansible.builtin.pip:
        name:
          - pip
          - setuptools
          - wheel
        state: latest
        executable: pip3

    - name: Download Terraform
      ansible.builtin.get_url:
        url: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
        dest: "{{ terraform_zip }}"
        mode: '0644'

    - name: Unzip Terraform
      ansible.builtin.unarchive:
        src: "{{ terraform_zip }}"
        dest: "/usr/local/bin/"
        remote_src: yes
      args:
        creates: "/usr/local/bin/terraform"

    - name: Clone attack range repo
      ansible.builtin.git:
        repo: https://github.com/splunk/attack_range.git
        dest: /home/ubuntu/attack_range
        version: master
        force: yes
      become_user: ubuntu

    - name: Download AWS CLI v2
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: "{{ awscli_zip }}"
        mode: '0644'

    - name: Unzip AWS CLI
      ansible.builtin.unarchive:
        src: "{{ awscli_zip }}"
        dest: /home/ubuntu/
        remote_src: yes

    - name: Install AWS CLI
      ansible.builtin.command:
        cmd: ./aws/install --update
        chdir: /home/ubuntu
        creates: /usr/local/bin/aws

    - name: Install Poetry
      ansible.builtin.shell: |
        curl -sSL https://install.python-poetry.org | python3 -
      args:
        executable: /bin/bash
        creates: "{{ poetry_bin }}"
      become_user: ubuntu

    - name: Add Poetry to PATH for ubuntu user
      ansible.builtin.lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'export PATH="/home/ubuntu/.local/bin:$PATH"'
        create: yes
      become_user: ubuntu

    - name: Install Poetry plugin (if poetry present)
      ansible.builtin.shell: |
        export PATH="/home/ubuntu/.local/bin:$PATH"
        {{ poetry_bin }} self add poetry-plugin-shell || true
      args:
        executable: /bin/bash
      become_user: ubuntu

    - name: Patch cffi version in requirements.txt (if present)
      ansible.builtin.replace:
        path: /home/ubuntu/attack_range/requirements.txt
        regexp: 'cffi==1.13.2'
        replace: 'cffi==1.15.1'
      ignore_errors: yes

    - name: Install Python dependencies via pip (if requirements exist)
      ansible.builtin.pip:
        requirements: /home/ubuntu/attack_range/requirements.txt
        executable: pip3
      ignore_errors: yes

    - name: Upgrade tabulate
      ansible.builtin.pip:
        name: "tabulate>=0.8.10"
        executable: pip3

    - name: Ensure attack_range directory owner is ubuntu
      ansible.builtin.file:
        path: /home/ubuntu/attack_range
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Create attack_range.conf from variables (idempotent)
      ansible.builtin.copy:
        dest: /home/ubuntu/attack_range/attack_range.conf
        content: |
          [global]
          log_path = attack_range.log
          log_level = INFO
          attack_range_password = {{ attack_range_password }}
          cloud_provider = {{ attack_range_provider }}

          [aws]
          instance_type_ec2 = {{ attack_range_instance_type | default("t2.medium") }}
          region = {{ attack_range_region | default("ap-southeast-2") }}

          [range_settings]
          key_name = {{ attack_range_key_name | default("attack-range-key-pair") }}
          ip_whitelist = 0.0.0.0/0
          private_key_path = {{ attack_range_private_key | default("/home/ubuntu/.ssh/Admin123.pem") }}
          region = {{ attack_range_region | default("ap-southeast-2") }}
          range_name = {{ attack_range_name | default("default") }}

          [environment]
          windows_domain_controller = 1
          windows_server = 0
          windows_client = 0
          kali_machine = 0
          zeek_sensor = 0
          phantom_server = 0

          [features]
          # Feature flags are converted from yes/no into true/false in the config
          splunk = {{ (attack_range_splunk | bool) | ternary('true','false') }}
          snort  = {{ (attack_range_snort  | bool) | ternary('true','false') }}
          zeek   = {{ (attack_range_zeek   | bool) | ternary('true','false') }}
          nginx  = {{ (attack_range_nginx  | bool) | ternary('true','false') }}

          [splunk_settings]
          splunk_url = https://download.splunk.com/products/splunk/releases/8.0.5/linux/splunk-8.0.5-a1a6394cc5ae-Linux-x86_64.tgz
          splunk_binary = splunk-8.0.5-a1a6394cc5ae-Linux-x86_64.tgz
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      become_user: ubuntu

    - name: Ensure attack_range.conf exists (sanity)
      ansible.builtin.stat:
        path: /home/ubuntu/attack_range/attack_range.conf
      register: attack_range_conf_stat

    - name: Fail if attack_range.conf missing
      ansible.builtin.fail:
        msg: "attack_range.conf not found - previous step failed"
      when: not attack_range_conf_stat.stat.exists

    - name: Run attack_range build (use correct argument order)
      ansible.builtin.command:
        argv:
          - python3
          - attack_range.py
          - -c
          - attack_range.conf
          - build
        chdir: /home/ubuntu/attack_range
      become_user: ubuntu
      register: attack_range_build
      failed_when: attack_range_build.rc != 0

    - name: Show attack_range build stdout/stderr on failure
      ansible.builtin.debug:
        msg: |
          rc={{ attack_range_build.rc }}
          stdout={{ attack_range_build.stdout }}
          stderr={{ attack_range_build.stderr }}
      when: attack_range_build.rc != 0
